# Quickstart controller class for nova neutron (OpenStack Networking)
class quickstack::neutron::ha_controller (
  $admin_email                   = $quickstack::params::admin_email,
  $admin_password                = $quickstack::params::admin_password,
  $ceilometer_metering_secret    = $quickstack::params::ceilometer_metering_secret,
  $ceilometer_user_password      = $quickstack::params::ceilometer_user_password,
  $cinder_backend_gluster        = $quickstack::params::cinder_backend_gluster,
  $cinder_backend_iscsi          = $quickstack::params::cinder_backend_iscsi,
  $cinder_db_password            = $quickstack::params::cinder_db_password,
  $ceph_cluster_network          = '',
  $ceph_public_network           = '',
  $ceph_fsid                     = '',
  $ceph_images_key               = '',
  $ceph_volumes_key              = '',
  $ceph_mon_host                 = [ ],
  $ceph_mon_initial_members      = [ ],
  $ceph_osd_pool_default_size    = '',
  $ceph_osd_journal_size         = '',
  $cinder_backend_eqlx           = $quickstack::params::cinder_backend_eqlx,
  $cinder_backend_eqlx_name      = $quickstack::params::cinder_backend_eqlx_name,
  $cinder_backend_gluster        = $quickstack::params::cinder_backend_gluster,
  $cinder_backend_gluster_name   = $quickstack::params::cinder_backend_gluster_name,
  $cinder_backend_iscsi          = $quickstack::params::cinder_backend_iscsi,
  $cinder_backend_iscsi_name     = $quickstack::params::cinder_backend_iscsi_name,
  $cinder_backend_nfs            = $quickstack::params::cinder_backend_nfs,
  $cinder_backend_nfs_name       = $quickstack::params::cinder_backend_nfs_name,
  $cinder_backend_rbd            = $quickstack::params::cinder_backend_rbd,
  $cinder_backend_rbd_name       = $quickstack::params::cinder_backend_rbd_name,
  $cinder_db_password            = $quickstack::params::cinder_db_password,
  $cinder_multiple_backends      = $quickstack::params::cinder_multiple_backends,
  $cinder_create_volume_types    = true,
  $cinder_gluster_shares         = $quickstack::params::cinder_gluster_shares,
  $cinder_nfs_shares             = $quickstack::params::cinder_nfs_shares,
  $cinder_nfs_mount_options      = $quickstack::params::cinder_nfs_mount_options,
  $cinder_san_ip                 = $quickstack::params::cinder_san_ip,
  $cinder_san_login              = $quickstack::params::cinder_san_login,
  $cinder_san_password           = $quickstack::params::cinder_san_password,
  $cinder_san_thin_provision     = $quickstack::params::cinder_san_thin_provision,
  $cinder_eqlx_group_name        = $quickstack::params::cinder_eqlx_group_name,
  $cinder_eqlx_pool              = $quickstack::params::cinder_eqlx_pool,
  $cinder_eqlx_use_chap          = $quickstack::params::cinder_eqlx_use_chap,
  $cinder_eqlx_chap_login        = $quickstack::params::cinder_eqlx_chap_login,
  $cinder_eqlx_chap_password     = $quickstack::params::cinder_eqlx_chap_password,
  $cinder_rbd_pool               = $quickstack::params::cinder_rbd_pool,
  $cinder_rbd_ceph_conf          = $quickstack::params::cinder_rbd_ceph_conf,
  $cinder_rbd_flatten_volume_from_snapshot
                                 = $quickstack::params::cinder_rbd_flatten_volume_from_snapshot,
  $cinder_rbd_max_clone_depth    = $quickstack::params::cinder_rbd_max_clone_depth,
  $cinder_rbd_user               = $quickstack::params::cinder_rbd_user,
  $cinder_rbd_secret_uuid        = $quickstack::params::cinder_rbd_secret_uuid,
  $cinder_user_password          = $quickstack::params::cinder_user_password,
  $cisco_nexus_plugin            = $quickstack::params::cisco_nexus_plugin,
  $cisco_vswitch_plugin          = $quickstack::params::cisco_vswitch_plugin,
  $controller_admin_host         = $quickstack::params::controller_admin_host,
  $controller_priv_host          = $quickstack::params::controller_priv_host,
  $controller_pub_host           = $quickstack::params::controller_pub_host,
  $glance_db_password            = $quickstack::params::glance_db_password,
  $glance_user_password          = $quickstack::params::glance_user_password,
  $glance_backend                = $quickstack::params::glance_backend,
  $glance_rbd_store_user         = $quickstack::params::glance_rbd_store_user,
  $glance_rbd_store_pool         = $quickstack::params::glance_rbd_store_pool,
  $heat_auth_encrypt_key	 = "1234567",
  $heat_cfn                      = $quickstack::params::heat_cfn,
  $heat_cloudwatch               = $quickstack::params::heat_cloudwatch,
  $heat_db_password              = $quickstack::params::heat_db_password,
  $heat_user_password            = $quickstack::params::heat_user_password,
  $horizon_secret_key            = $quickstack::params::horizon_secret_key,
  $keystone_admin_token          = $quickstack::params::keystone_admin_token,
  $keystone_db_password          = $quickstack::params::keystone_db_password,
  $keystonerc                    = false,
  $neutron_metadata_proxy_secret = $quickstack::params::neutron_metadata_proxy_secret,
  $mysql_host                    = $quickstack::params::mysql_host,
  $mysql_root_password           = $quickstack::params::mysql_root_password,
  $neutron_core_plugin           = 'neutron.plugins.ml2.plugin.Ml2Plugin',
  $neutron_conf_additional_params = { default_quota => 'default',
                                      quota_network => 'default',
                                      quota_subnet => 'default',
                                      quota_port => 'default',
                                      quota_security_group => 'default',
                                      quota_security_group_rule  => 'default',
                                      network_auto_schedule => 'default',
                                    },
  $nova_conf_additional_params   = { quota_instances => 'default',
                                     quota_cores => 'default',
                                     quota_ram => 'default',
                                     quota_floating_ips => 'default',
                                     quota_fixed_ips => 'default',
                                     quota_driver => 'default',
                                     },
  $n1kv_plugin_additional_params = { default_policy_profile => 'default-pp',
                                     network_node_policy_profile => 'default-pp',
                                     poll_duration => '10',
                                     http_pool_size => '4',
                                     http_timeout => '120',
                                     firewall_driver => 'neutron.agent.firewall.NoopFirewallDriver',
                                     enable_sync_on_start => 'True',
                                     },
  $n1kv_vsm_ip                   = '0.0.0.0',
  $n1kv_vsm_password             = undef,
  $neutron_db_password           = $quickstack::params::neutron_db_password,
  $neutron_user_password         = $quickstack::params::neutron_user_password,
  $nexus_config                  = $quickstack::params::nexus_config,
  $nexus_credentials             = $quickstack::params::nexus_credentials,
  $nova_db_password              = $quickstack::params::nova_db_password,
  $nova_user_password            = $quickstack::params::nova_user_password,
  $nova_default_floating_pool    = $quickstack::params::nova_default_floating_pool,
  $ovs_vlan_ranges               = $quickstack::params::ovs_vlan_ranges,
  $provider_vlan_auto_create     = $quickstack::params::provider_vlan_auto_create,
  $provider_vlan_auto_trunk      = $quickstack::params::provider_vlan_auto_trunk,
  $enable_tunneling              = $quickstack::params::enable_tunneling,
  $tunnel_id_ranges              = '1:1000',
  $ml2_type_drivers              = ['vxlan', 'flat','vlan','gre','local'],
  $ml2_tenant_network_types      = ['vxlan', 'flat','vlan','gre'],
  $ml2_mechanism_drivers         = ['openvswitch','l2population'],
  $ml2_flat_networks             = ['*'],
  $ml2_network_vlan_ranges       = ['physnet1:1000:2999'],
  $ml2_tunnel_id_ranges          = ['20:100'],
  $ml2_vxlan_group               = '224.0.0.1',
  $ml2_vni_ranges                = ['10:100'],
  $ml2_security_group            = 'true',
  $ml2_firewall_driver           = 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver',
  $amqp_provider                 = $quickstack::params::amqp_provider,
  $amqp_host                     = $quickstack::params::amqp_host,
  $amqp_username                 = $quickstack::params::amqp_username,
  $amqp_password                 = $quickstack::params::amqp_password,
  $security_group_api            = 'neutron',
  $swift_shared_secret           = $quickstack::params::swift_shared_secret,
  $swift_admin_password          = $quickstack::params::swift_admin_password,
  $swift_ringserver_ip           = '192.168.203.1',
  $swift_storage_ips             = ['192.168.203.2', '192.168.203.3', '192.168.203.4'],
  $swift_storage_device          = 'device1',
  $tenant_network_type           = $quickstack::params::tenant_network_type,
  $verbose                       = $quickstack::params::verbose,
  $ssl                           = $quickstack::params::ssl,
  $freeipa                       = $quickstack::params::freeipa,
  $mysql_ca                      = $quickstack::params::mysql_ca,
  $mysql_cert                    = $quickstack::params::mysql_cert,
  $mysql_key                     = $quickstack::params::mysql_key,
  $amqp_ca                       = $quickstack::params::amqp_ca,
  $amqp_cert                     = $quickstack::params::amqp_cert,
  $amqp_key                      = $quickstack::params::amqp_key,
  $horizon_ca                    = $quickstack::params::horizon_ca,
  $horizon_cert                  = $quickstack::params::horizon_cert,
  $horizon_key                   = $quickstack::params::horizon_key,
  $amqp_nssdb_password           = $quickstack::params::amqp_nssdb_password,

) inherits quickstack::params {

#  include quickstack::pacemaker::common

  if str2bool_i("$ssl") {
    $qpid_protocol = 'ssl'
    $sql_connection = "mysql://neutron:${neutron_db_password}@${mysql_host}/neutron?ssl_ca=${mysql_ca}"
  } else {
    $qpid_protocol = 'tcp'
    $sql_connection = "mysql://neutron:${neutron_db_password}@${mysql_host}/neutron"
  }
 
  if ($controller_priv_host  == $controller_pub_host) {
      $crtl_priv_host = $::ipaddress
  }else{
      $crtl_priv_host = $controller_priv_host
  }
#  if ($ovs_tunnel_iface_ip  != '' ) {
#      exec { "setovs_tunnel_iface":
#          #command     => "bash -c \"iface=`ifconfig -a | grep -B 2 -i '$ovs_tunnel_iface_mac' |  grep -i mtu |  head -1 | cut -f 1 -d ':'`;ifconfig \${iface} $ovs_tunnel_iface_ip netmask $ovs_tunnel_iface_netmask\"",
#          command     => "ifconfig $ovs_tunnel_iface $ovs_tunnel_iface_ip netmask $ovs_tunnel_iface_netmask",
#          path        => ['/usr/sbin', '/sbin','/usr/local/sbin','/usr/local/bin','/usr/bin','/root/bin'],
#          before      => [Class ['quickstack::pacemaker::common'],Class ['::neutron::plugins::ovs']],
#      }
#      $local_ip = $ovs_tunnel_iface_ip
#  }else{
#      $local_ip = find_ip("$ovs_tunnel_network","$ovs_tunnel_iface","")
#  }

#  if ($ceph_iface_ip  != '' ) {
#      exec { "set_ceph_iface":
#          command     => "ifconfig $ceph_iface $ceph_iface_ip netmask $ceph_iface_netmask",
#          path        => ['/usr/sbin', '/sbin','/usr/local/sbin','/usr/local/bin','/usr/bin','/root/bin'],
#          before      => [Class ['::neutron::plugins::ovs']],
#      }
#  }else{
#      $ceph_local_ip = find_ip("$ovs_tunnel_network","$ceph_iface","")
#  }

#  file { '/usr/bin/init_vips':
#    ensure  => present,
#    mode    => '0777',
#    owner   => 'root',
#    group   => 'root',
#    content => template('quickstack/init_vips.erb'),
#    before      => [Class ['::neutron::plugins::ovs']],
#  }

#  class {'::quickstack::firewall::galera_cluster':}

#  package { 'ceph':
#    ensure   => 'installed',
#    name     => 'ceph',
#    provider => 'yum',
#    before  => File['/etc/ceph/ceph.conf'],
#  }

  package { 'kmod-rbd':
    ensure   => 'installed',
    name     => 'kmod-rbd',
    provider => 'yum',
  }

#  file { '/etc/ceph/ceph.conf':
#    ensure  => present,
#    mode    => '0644',
#    owner   => 'root',
#    group   => 'root',
#    content => template('quickstack/ceph.config.erb'),
#    before  => File['/etc/ceph/ceph.client.admin.keyring'],
#  }

#  file { '/etc/ceph/ceph.client.admin.keyring':
#    ensure  => present,
#    mode    => '0644',
#    owner   => 'root',
#    group   => 'root',
#    content => template('quickstack/ceph.client.admin.keyring.erb'),
#  }

#  file { '/usr/bin/neutron-agent-watch':
#    ensure  => present,
#    mode    => '0777',
#    owner   => 'root',
#    group   => 'root',
#    content => template('quickstack/neutron-agent-watch.erb'),
#    before      => [Class ['::neutron::plugins::ovs']],
#  }

#  file { '/etc/neutron/agent_watch.ini':
#    ensure  => present,
#    mode    => '0644',
#    owner   => 'root',
#    group   => 'root',
#    content => template('quickstack/agent_watch.ini.erb'),
#    before      => [Class ['::neutron::plugins::ovs']],
#  }

  if str2bool_i("$bootstrap") {
    if ($pacemaker_cluster_members =="") {
       $pcs_cluster_members =  $::ipaddress
    } else {
       $pcs_cluster_members = $pacemaker_cluster_members
    }
    class { 'quickstack::pacemaker::common':
#        neutron_metadata_proxy_secret  => $neutron_metadata_proxy_secret,
  	pacemaker_cluster_name         => "openstack",
  	pacemaker_cluster_members      => $pacemaker_cluster_members,
        fencing_type                   => $fencing_type,
        fence_ipmilan_address          => $fence_ipmilan_address,
        fence_ipmilan_username         => $fence_ipmilan_username,
        fence_ipmilan_password         => $fence_ipmilan_password,
  	fence_ipmilan_interval         => "60s",
        fence_ipmilan_hostlist         => $fence_ipmilan_hostlist,
        fence_ipmilan_host_to_address  => $fence_ipmilan_host_to_address,
        fence_xvm_clu_iface            => $fence_xvm_clu_iface,
        fence_xvm_clu_network          => $fence_xvm_clu_network,
        fence_xvm_manage_key_file      => "false",
        fence_xvm_key_file_password    => $fence_xvm_key_file_password,
    }
  }else{

#     package { 'pacemaker':
#       ensure   => 'installed',
#       name     => 'pacemaker',
#       provider => 'yum',
#       before  => File['/etc/ceph/ceph.conf'],
#     }

#     package { 'pcs':
#       ensure   => 'installed',
#       name     => 'pcs',
#       provider => 'yum',
#       before  => Service['pcsd'],
#     }

#     package { 'fence-agents-all':
#       ensure   => 'installed',
#       name     => 'fence-agents-all',
#       provider => 'yum',
#       before  => File['/etc/ceph/ceph.conf'],
#     }

#    service { 'pcsd':
#      ensure     => true,
#      enable     => true,
#      hasstatus  => true,
#      hasrestart => true,
#      name       => 'pcsd',
#    }

  }

  class { 'quickstack::controller_common':
    admin_email                   => $admin_email,
    admin_password                => $admin_password,
    ceilometer_metering_secret    => $ceilometer_metering_secret,
    ceilometer_user_password      => $ceilometer_user_password,
    cinder_backend_gluster        => $cinder_backend_gluster,
    cinder_backend_iscsi          => $cinder_backend_iscsi,
    cinder_db_password            => $cinder_db_password,
#    cinder_gluster_servers        => $cinder_gluster_servers,
#    cinder_gluster_volume         => $cinder_gluster_volume,
    cinder_user_password          => $cinder_user_password,
#    rbd_secret_uuid               => $rbd_secret_uuid,
    controller_priv_host          => $crtl_priv_host,
    controller_pub_host           => $controller_pub_host,
    glance_db_password            => $glance_db_password,
    glance_user_password          => $glance_user_password,
    heat_cfn                      => $heat_cfn,
    heat_cloudwatch               => $heat_cloudwatch,
    heat_db_password              => $heat_db_password,
    heat_user_password            => $heat_user_password,
    horizon_secret_key            => $horizon_secret_key,
    keystone_admin_token          => $keystone_admin_token,
    keystone_db_password          => $keystone_db_password,
    neutron_metadata_proxy_secret => $neutron_metadata_proxy_secret,
    mysql_host                    => $mysql_host,
    mysql_root_password           => $mysql_root_password,
    neutron                       => true,
    neutron_core_plugin           => $neutron_core_plugin,
    neutron_db_password           => $neutron_db_password,
    neutron_user_password         => $neutron_user_password,
    nova_db_password              => $nova_db_password,
    nova_user_password            => $nova_user_password,
    nova_default_floating_pool    => $nova_default_floating_pool,
#    rabbit_host                   => $rabbit_host,
#    rabbit_port                   => $rabbit_port,
#    rabbit_userid                 => $rabbit_userid,
#    rabbit_password               => $rabbit_password,
#    rabbit_hosts                  => $rabbit_hosts,
#    rabbit_virtual_host           => $rabbit_virtual_host,
#    rabbit_ha_queues              => $rabbit_ha_queues,
    swift_shared_secret           => $swift_shared_secret,
    swift_admin_password          => $swift_admin_password,
    swift_ringserver_ip           => $swift_ringserver_ip,
    swift_storage_ips             => $swift_storage_ips,
    swift_storage_device          => $swift_storage_device,
    verbose                       => $verbose,
    ssl                           => $ssl,
    freeipa                       => $freeipa,
    mysql_ca                      => $mysql_ca,
    mysql_cert                    => $mysql_cert,
    mysql_key                     => $mysql_key,
    horizon_ca                    => $horizon_ca,
    horizon_cert                  => $horizon_cert,
    horizon_key                   => $horizon_key,

#    bootstrap                     => str2bool_i("$bootstrap"),

#    wsrep_sst_username   => $wsrep_sst_username,
#    wsrep_sst_password   => $wsrep_sst_password,
#    wsrep_cluster_members => $wsrep_cluster_members,

#    ceph_iface                    => $ceph_iface,
#    ceph_iface_ip                 => $ceph_iface_ip,
#    ceph_iface_netmask            => $ceph_iface_netmask,
#    admin_iface                   => $admin_iface,
#    mariadb_vip                   => $mariadb_vip,
#    mysql_vip                     => $mysql_vip,
#    rabbitmq_vip                  => $rabbitmq_vip,
#    keystone_vip                  => $keystone_vip,
#    memcache_vip                  => $memcache_vip,
#    glance_vip                    => $glance_vip,
#    cinder_vip                    => $cinder_vip,
#    neutron_vip                   => $neutron_vip,
#    nova_vip                      => $nova_vip,
#    horizon_vip                   => $horizon_vip,
#    heat_vip                      => $heat_vip,
#    mongo_vip                     => $mongo_vip,
#    ceilometer_vip                => $ceilometer_vip,
#    swift_vip                     => $swift_vip,
     heat_auth_encrypt_key         => "12345678",

  }
  ->

  #Class['::quickstack::pacemaker::common']

  class { '::neutron':
    enabled               => true,
    verbose               => $verbose,
    allow_overlapping_ips => true,
    rpc_backend           => 'neutron.openstack.common.rpc.impl_kombu',
    rabbit_host           => $rabbit_host,
    rabbit_port           => $rabbit_port,
    rabbit_password       => $rabbit_password,
    rabbit_hosts          => $rabbit_hosts,
    core_plugin           => $neutron_core_plugin
  }

  ->
  # FIXME: This really should be handled by the neutron-puppet module, which has
  # a review request open right now: https://review.openstack.org/#/c/50162/
  # If and when that is merged (or similar), the below can be removed.
  exec { 'neutron-db-manage upgrade':
    command     => 'neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head',
    path        => '/usr/bin',
    user        => 'neutron',
    logoutput   => 'on_failure',
    before      => Service['neutron-server'],
    require     => [Neutron_config['database/connection'], Neutron_config['DEFAULT/core_plugin']],
  }

  class { '::neutron::server':
    auth_host        => $::ipaddress,
    auth_password    => $neutron_user_password,
    connection       => $sql_connection,
    sql_connection   => false,
  }

  if $neutron_core_plugin == 'neutron.plugins.ml2.plugin.Ml2Plugin' {
    # FIXME: This lovely workaround is because puppet-neutron doesn't
    # install the ml2 package for us, which makes everything else fail.
    # This has been fixed upstream, so we can remove this whole chunk once our
    # puppet rpm deps catch up.
    if str2bool_i("$ml2_install_deps") {
      # test mechanism drivers
      validate_array($ml2_mechanism_drivers)
      if ! $ml2_mechanism_drivers {
        warning('Without networking mechanism driver, ml2 will not communicate with L2 agents')
      }

      # Specific plugin configuration
      # We need this before https://review.openstack.org/#/c/67004/ is
      # merged
      if ('openvswitch' in $ml2_mechanism_drivers) {
        if (!defined(Package['neutron-plugin-ovs'])) {
          package { 'neutron-plugin-ovs':
            ensure => present,
            name   => $::neutron::params::ovs_server_package,
            before => Class['::neutron::plugins::ml2'],
          }
        }
      }
      if ('linuxbridge' in $ml2_mechanism_drivers) {
        if (!defined(Package['neutron-plugin-linuxbridge'])) {
          package { 'neutron-plugin-linuxbridge':
            ensure => present,
            name   => $::neutron::params::linuxbridge_server_package,
            before => Class['::neutron::plugins::ml2'],
          }
        }
      }
    }
    neutron_config {
      'DEFAULT/service_plugins':
        value => join(['neutron.services.l3_router.l3_router_plugin.L3RouterPlugin','neutron.services.loadbalancer.plugin.LoadBalancerPlugin',
		 'neutron.services.firewall.fwaas_plugin.FirewallPlugin','neutron.services.vpn.plugin.VPNDriverPlugin',
                 'neutron.services.metering.metering_plugin.MeteringPlugin',
                 ],',');
# service_plugins = neutron.services.l3_router.l3_router_plugin.L3RouterPlugin,neutron.services.firewall.fwaas_plugin.FirewallPlugin
#neutron.services.l3_router.l3_router_plugin.L3RouterPlugin,neutron.services.loadbalancer.plugin.LoadBalancerPlugin,neutron.services.firewall.fwaas_plugin.FirewallPlugin
#       'database/connection': value => $sql_connection;
#       'keystone_authtoken/admin_tenant_name': value => 'services';
#       'keystone_authtoken/admin_user':        value => 'neutron';
#       'keystone_authtoken/admin_password':    value => $neutron_user_password;
#       'keystone_authtoken/auth_host':         value => $controller_priv_host;
    }
    ->
    class { '::neutron::plugins::ml2':
      type_drivers          => $ml2_type_drivers,
      tenant_network_types  => $ml2_tenant_network_types,
      mechanism_drivers     => $ml2_mechanism_drivers,
      flat_networks         => $ml2_flat_networks,
      network_vlan_ranges   => $ml2_network_vlan_ranges,
      tunnel_id_ranges      => $ml2_tunnel_id_ranges,
      vxlan_group           => $ml2_vxlan_group,
      vni_ranges            => $ml2_vni_ranges,
      enable_security_group => $ml2_security_group,
      #enable_security_group => $ml2_enable_security_group,
      firewall_driver       => true,
    }
  }

  if $neutron_core_plugin == 'neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2' {
    neutron_plugin_ovs {
      'OVS/enable_tunneling': value => $enable_tunneling;
      'SECURITYGROUP/firewall_driver':
      value => 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver';
    }
  }

    class { '::neutron::plugins::ovs':
      sql_connection      => $sql_connection,
      tenant_network_type => $tenant_network_type,
      network_vlan_ranges => $ml2_network_vlan_ranges,
      tunnel_id_ranges    => $tunnel_id_ranges,
      vxlan_udp_port      => $ovs_vxlan_udp_port,
    }

  if $neutron_core_plugin == 'neutron.plugins.cisco.network_plugin.PluginV2' {
    class { 'quickstack::neutron::plugins::cisco':
      neutron_db_password          => $neutron_db_password,
      neutron_user_password        => $neutron_user_password,
      ovs_vlan_ranges              => $ovs_vlan_ranges,
      cisco_vswitch_plugin         => $cisco_vswitch_plugin,
      nexus_config                 => $nexus_config,
      cisco_nexus_plugin           => $cisco_nexus_plugin,
      nexus_credentials            => $nexus_credentials,
      provider_vlan_auto_create    => $provider_vlan_auto_create,
      provider_vlan_auto_trunk     => $provider_vlan_auto_trunk,
      mysql_host                   => $mysql_host,
      mysql_ca                     => $mysql_ca,
      tenant_network_type          => $tenant_network_type,
    }
  }


  firewall { '001 neutron server (API)':
    proto    => 'tcp',
    dport    => ['9696'],
    action   => 'accept',
  }

  if $neutron_core_plugin == 'neutron.plugins.cisco.network_plugin.PluginV2' {
    class { 'quickstack::neutron::plugins::cisco':
      neutron_db_password          => $neutron_db_password,
      neutron_user_password        => $neutron_user_password,
      ovs_vlan_ranges              => $ovs_vlan_ranges,
      cisco_vswitch_plugin         => $cisco_vswitch_plugin,
      nexus_config                 => $nexus_config,
      cisco_nexus_plugin           => $cisco_nexus_plugin,
      nexus_credentials            => $nexus_credentials,
      provider_vlan_auto_create    => $provider_vlan_auto_create,
      provider_vlan_auto_trunk     => $provider_vlan_auto_trunk,
      mysql_host                   => $mysql_host,
      mysql_ca                     => $mysql_ca,
      tenant_network_type          => $tenant_network_type,
    }
  }

  class { '::nova::network::neutron':
    neutron_admin_password => $neutron_user_password,
    neutron_url            => "http://${neutron_url}:9696",
    neutron_admin_auth_url => "http://${auth_host}:35357/v2.0",
  }

  class { '::neutron::agents::ovs':
  #  bridge_uplinks   => $ovs_bridge_uplinks,
  #  local_ip         => $local_ip,
  #  bridge_mappings  => $ovs_bridge_mappings,
  #  enable_tunneling => str2bool_i("$enable_tunneling"),
  #  tunnel_types     => $ovs_tunnel_types,
  #  vxlan_udp_port   => $ovs_vxlan_udp_port,
  }

  class { '::neutron::agents::dhcp': 
  }

  class { '::neutron::agents::l3':
  #  external_network_bridge => $external_network_bridge,
  }

  #class { 'neutron::agents::metadata':
  #  auth_password => $neutron_user_password,
  #  shared_secret => $neutron_metadata_proxy_secret,
  #  auth_url      => "http://${auth_host}:35357/v2.0",
  #  metadata_ip   => $neutron_priv_host,
  #  metadata_host   => $metadata_host,
  #}

  class {'::quickstack::firewall::neutron':}

#  file { '/lib/systemd/system/networks.service':
#    ensure => present,
#    mode   => '0744',
#    owner  => 'root',
#    group  => 'root',
#    content => template('quickstack/networks.service.erb'),
#  }

#  service { 'networks':
#        name   => 'networks',
#        enable => true,
#  }

#  service { 'mariadb':
#        name   => 'mariadb',
#        enable => true,
#  }

  service { 'ntpd':
        ensure => 'running',
        name   => 'ntpd',
        enable => true,
      }

#  file { '/usr/lib/python2.7/site-packages/cinder/volume/drivers/eqlx.py':
#    ensure => present,
#    mode   => '0644',
#    owner  => 'root',
#    group  => 'root',
#    content => template('quickstack/eqlx.py.erb'),
#  }


#  file { '/etc/ntp.conf':
#    ensure => present,
#    mode   => '0644',
#    owner  => 'root',
#    group  => 'root',
#    content => template('quickstack/ntp-client.conf.erb'),
#}

#  file { '/etc/ntp/step-tickers':
#    ensure => present,
#    mode   => '0644',
#    owner  => 'root',
#    group  => 'root',
#    content => template('quickstack/step-tickers.erb'),
#}


}
